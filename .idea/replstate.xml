<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492256808398">{:repl-history {:ide [], :local [{:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-] x4\n  &gt;. ; Print 'e'\&quot;\n  false)\n(stats)&quot;, :offset 146} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-] x4\n  &gt;. ; Print 'e'\&quot;\n  true)\n(stats)&quot;, :offset 145} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]+ x4 + 1\n  &gt;. ; Print 'e'\&quot;\n  true)\n(stats)&quot;, :offset 150} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+&lt; x4 + 1\n  &gt;. ; Print 'e'\&quot;\n  true)\n(stats)&quot;, :offset 152} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ x4 + 1\n  . ; Print 'e'\&quot;\n  true)\n(stats)&quot;, :offset 150} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] x2\n  &gt;. ; Print 'H'\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ x4 plus 1\n  . ; Print 'e'\&quot;\n  true)\n(stats)&quot;, :offset 153} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  . print l\&quot;\n  true)\n(stats)&quot;, :offset 180} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\&quot;\n  true)\n(stats)&quot;, :offset 182} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  +++++++ 7\n  [&gt;+++++++++++&lt;-]++ times 11 plus two\&quot;\n  false)\n(stats)&quot;, :offset 234} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  +++++++ 7\n  [&gt;+++++++++++&lt;-]++ times 11 plus two\n  . print o\&quot;\n  false)\n(stats)&quot;, :offset 246} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  +++++++ 7\n  [&gt;-----------&lt;-]++ times -11 plus two\n  . print o\&quot;\n  false)\n(stats)&quot;, :offset 247} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  [&gt;+++++++++++&lt;-]++ times 11 plus two\n  . print o\&quot;\n  false)\n(stats)&quot;, :offset 247} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  [&gt;+++++++++++&lt;-]++ times 11 plus two\n  . print o\&quot;\n  true)\n(stats)&quot;, :offset 246} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  [&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  false)\n(stats)&quot;, :offset 248} {:command &quot;(char 78)&quot;, :offset 9} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  [&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  true)\n(stats)&quot;, :offset 247} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  &lt;[&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  true)\n(false)&quot;, :offset 248} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  &lt;[&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  false)\n(stats)\\&quot;, :offset 250} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  &lt;[&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  false)\n(stats)&quot;, :offset 249} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  &lt;[&gt;+++++++++++&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  true)\n(stats)&quot;, :offset 248} {:command &quot;(interpret\n  \&quot;++++++++++++++++++++++++++++++++++++ 36\n  [&gt;++&lt;-] times 2\n  &gt;. ; print H\n  &lt;+++++++ 7\n  [&gt;++++&lt;-]&gt;+ times 4 plus 1\n  .  print e\n  +++++++\n  .. print ll\n  ------- -7\n  &lt;[&gt;-----------&lt;-]&gt;++ times 11 plus two\n  . print o\&quot;\n  true)\n(stats)&quot;, :offset 248} {:command &quot;(interpret\n \&quot;++++++++++++++++++++ 20\n &gt;+++++&lt;\n [&gt;---&lt;-]&gt;.\&quot;\n  true)\n&quot;, :offset 67} {:command &quot;(interpret\n \&quot;++++++++++++++++++++ 20\n &gt;+++++\n [&gt;---&lt;-]&gt;.\&quot;\n  true)\n&quot;, :offset 66} {:command &quot;(interpret\n \&quot;++++++++++++++++++++ 20\n &gt;+++++\n [&lt;---&gt;-]&gt;.\&quot;\n  true)\n&quot;, :offset 66} {:command &quot;(interpret\n \&quot;++++++++++++++++++++ 20\n  [&gt;++&lt;-]&gt;.\&quot;\n  true)\n&quot;, :offset 58} {:command &quot;(interpret\n \&quot;++++++++++++++++++++ 20\n  [&gt;--&lt;-]&gt;.\&quot;\n  true)\n&quot;, :offset 58} {:command &quot;(interpret\n \&quot;&gt;++++++++++++++++++++++++++++++++++++ 36\n  &lt;+++++\n  [&gt;----&lt;-]&gt;. minus 20\&quot;\n  true)\n&quot;, :offset 95} {:command &quot;(interpret my-hello-world true)\n&quot;, :offset 32} {:command &quot;(interpret my-hello-world false)\n(stats)&quot;, :offset 40} {:command &quot;(interpret my-hello-world true)\n(stats)&quot;, :offset 39} {:command &quot;(char \\o)&quot;, :offset 9} {:command &quot;(int \\o)&quot;, :offset 8} {:command &quot;(char 100)&quot;, :offset 10} {:command &quot;(map first-mult (range 75 85))&quot;, :offset 30} {:command &quot;(produce-inc-instruction)\n(produce-inc-instruction)&quot;, :offset 51, :ns &quot;brain-fuck.compiler.macro-tests&quot;} {:command &quot;(effect-pointer inc)&quot;, :offset 20, :ns &quot;brain-fuck.compiler.macro-tests&quot;} {:command &quot;@cells&quot;, :offset 6, :ns &quot;brain-fuck.compiler.macro-tests&quot;} {:command &quot;@cell-pointer&quot;, :offset 13, :ns &quot;brain-fuck.compiler.macro-tests&quot;} {:command &quot;(interpret false\n  +++++[&gt;+++++&lt;-]&gt;.)\n  &quot;, :offset 37, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret true\n  +++++[&gt;+++++&lt;-]&gt;.)\n  &quot;, :offset 39, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot; true)\n  &quot;, :offset 41, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot; false)\n  &quot;, :offset 39, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret my-hello-world-exp true)\n  &quot;, :offset 35, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret my-hello-world-exp false)\n  &quot;, :offset 36, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;[+&gt;+.]\&quot; false)\n  &quot;, :offset 26, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;[+&gt;+.&lt;]\&quot; false)\n  &quot;, :offset 27, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(char 9)&quot;, :offset 8, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(char 8)&quot;, :offset 8, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(char 10)&quot;, :offset 9, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;[-.]\&quot; false)\n  &quot;, :offset 24, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;[+.]\&quot; false)\n  &quot;, :offset 24, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;++++++++++++++++[&gt;++&lt;-]\n            [+.]\&quot; false)\n  &quot;, :offset 60, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(interpret \&quot;++++++++++++++++[&gt;++&lt;-]&gt;\n            [+.]\&quot; false)\n  &quot;, :offset 61, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(Character/toLowerCase \&quot;++\&quot;)&quot;, :offset 28, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(clojure.string/lower-case \&quot;++\&quot;)&quot;, :offset 32, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(clojure.string/lower-case \&quot;++&gt;&gt;STOP\&quot;)&quot;, :offset 38, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;()&quot;, :offset 1} {:command &quot;(run-commands (s/new-state 10)\n              (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;)\n              true)&quot;, :offset 105, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(-&gt; (s/new-state 10)\n    (run-commands \n        (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;)\n        true)\n    (str))&quot;, :offset 113, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;)&quot;, :offset 40, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(if-let)&quot;, :offset 8} {:command &quot;(-&gt; (s/new-state 10)\n    (run-commands \n        (vec (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;))\n        true)\n    (str))&quot;, :offset 119, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(s/run-command nil s/move-pointer-left)&quot;, :offset 39, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(-&gt; (s/new-state 10)\n    (run-commands \n        (vec (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;))\n        true))&quot;, :offset 109, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(-&gt; (s/new-state 10)\n    (run-commands \n        (vec (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;))\n        false))&quot;, :offset 110, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(-&gt; (s/new-state 10)\n    (run-commands \n        (vec (code-to-commands \&quot;++++++[&gt;++++++&lt;-]&gt;.\&quot;))\n        false)\n    (str))&quot;, :offset 120, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;do&quot;, :offset 2, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;++&gt;&quot;, :offset 3, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;&gt;&gt;&quot;, :offset 2, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;&gt;&quot;, :offset 1} {:command &quot;+++++++++++++++++++++++++++++++++++++++++&quot;, :offset 41, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;++++++++++++++++++++++++&quot;, :offset 24} {:command &quot;++&quot;, :offset 2, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;+&quot;, :offset 1, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;--&quot;, :offset 2, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(1 + 1)&quot;, :offset 6} {:command &quot;++++++ [&gt;++++++&lt;-]&gt;.&quot;, :offset 20, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;++++++&quot;, :offset 6} {:command &quot;(drop)&quot;, :offset 6} {:command &quot;++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.&quot;, :offset 106, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;reset&quot;, :offset 5, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(/ 255 44)&quot;, :offset 10, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(double (/ 255 44))&quot;, :offset 19, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(* 50 6)&quot;, :offset 8, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(drop-while zero? [000001111100000])&quot;, :offset 36, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(drop-while zero? [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0])&quot;, :offset 50, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(str (new-state 20))&quot;, :offset 20, :ns &quot;brain-fuck.state&quot;} {:command &quot;(str (new-state 300000))&quot;, :offset 24, :ns &quot;brain-fuck.state&quot;} {:command &quot;(str (new-state 300000000))&quot;, :offset 27, :ns &quot;brain-fuck.state&quot;} {:command &quot;(drop-last-while zero? [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0])&quot;, :offset 55, :ns &quot;brain-fuck.state&quot;} {:command &quot;(drop-last-while #(= 1 %) [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0])&quot;, :offset 58, :ns &quot;brain-fuck.state&quot;} {:command &quot;(drop-last-while #(= 2 %) [0 0 0 0 0 1 1 1 1 1 0 0 0 2 2 2])&quot;, :offset 60, :ns &quot;brain-fuck.state&quot;} {:command &quot;(let [s (new-state 3000000)]\n  (g/bench \n    (str s)))&quot;, :offset 54, :ns &quot;brain-fuck.state&quot;} {:command &quot;(let [s (new-state 300000)]\n  (g/bench \n    (str s)))&quot;, :offset 53, :ns &quot;brain-fuck.state&quot;} {:command &quot;(let [s (new-state 30000)]\n  (g/bench \n    (str s)))&quot;, :offset 52, :ns &quot;brain-fuck.state&quot;} {:command &quot;(let [s (-&gt; (new-state 30000)\n            (assoc :cells (vec (concat (repeat 15000 1)\n                                       (repeat 15000 0)))))]\n  (g/bench \n    (str s)))&quot;, :offset 172, :ns &quot;brain-fuck.state&quot;} {:command &quot;(repl)&quot;, :offset 6, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;++++++ [&gt;++++++&lt;-] &gt;.&quot;, :offset 21, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;stop&quot;, :offset 4, :ns &quot;brain-fuck.interpreter&quot;} {:command &quot;(-main \&quot;t\&quot; true)&quot;, :offset 16, :ns &quot;brain-fuck.main&quot;} {:command &quot;(-main \&quot;i\&quot; true)&quot;, :offset 16, :ns &quot;brain-fuck.main&quot;}], :remote []}}</component>
</project>